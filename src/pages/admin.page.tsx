// https://ui.mantine.dev/component/actions-grid
import SearchField from "@/components/crud/SearchField";
import UserListTable from "@/components/crud/UserListTable";
import { api } from "@/utils/api";
import {
  Card,
  Modal,
  SimpleGrid,
  Text,
  UnstyledButton,
  createStyles,
  rem,
} from "@mantine/core";
import { useDisclosure } from "@mantine/hooks";
import {
  IconUserCircle,
  IconUserMinus,
  IconUserPlus,
  IconUserSearch,
} from "@tabler/icons-react";
import { type NextPage } from "next";
import Head from "next/head";

// type crudOperations = {
//   title: string;
//   icon: JSX.Element;
//   operation: string;
// };

const useStyles = createStyles((theme) => ({
  card: {
    backgroundColor:
      theme.colorScheme === "dark"
        ? theme.colors.dark[6]
        : theme.colors.gray[0],
  },

  title: {
    textAlign: "center",
    fontWeight: 700,
  },

  item: {
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    borderRadius: theme.radius.md,
    height: rem(90),
    backgroundColor:
      theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
    transition: "box-shadow 150ms ease, transform 100ms ease",

    "&:hover": {
      boxShadow: theme.shadows.md,
      transform: "scale(1.05)",
    },
  },
}));

const AdminDashboard: NextPage = () => {
  const { classes } = useStyles();
  const [openedCreate, { open: openCreate, close: closeCreate }] =
    useDisclosure(false);
  const [openedUpdate, { open: openUpdate, close: closeUpdate }] =
    useDisclosure(false);
  const [openedList, { open: openList, close: closeList }] =
    useDisclosure(false);
  const [openedDelete, { open: openDelete, close: closeDelete }] =
    useDisclosure(false);
  const { data: listData } = api.user.listUser.useQuery();
  console.log(listData);

  // const handleOp = (op: string) => {
  //   console.log(op);
  //   switch (op) {
  //     case "create":
  //       //createWindow.onOpen();
  //       break;
  //     case "update":
  //       //updateWindow.onOpen();
  //       break;
  //     case "list":
  //       //listWindow.onOpen();
  //       setList(true);
  //       break;
  //     case "delete":
  //       //deleteWindow.onOpen();
  //       break;
  //   }
  // };
  const crudOperations = [
    {
      title: "Create User",
      icon: IconUserPlus,
      operation: () => openCreate(),
    },
    {
      title: "Update User",
      icon: IconUserCircle,
      operation: () => openUpdate(),
    },
    { title: "List User", icon: IconUserSearch, operation: () => openList() },
    {
      title: "Delete User",
      icon: IconUserMinus,
      operation: () => openDelete(),
    },
  ];

  const items = crudOperations.map((item) => (
    <UnstyledButton
      key={item.title}
      className={classes.item}
      // onClick={() => handleOp(item.operation)}
      onClick={item.operation}
    >
      <item.icon color={"red"} size="2rem" />
      <Text size="md" mt={7}>
        {item.title}
      </Text>
    </UnstyledButton>
  ));

  return (
    <>
      <Head>
        <title>Admin Dashboard</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="mx-auto w-1/2">
        <Text size="xl" weight={500} mb="xl">
          Admin Dashboard
        </Text>
        <Card withBorder radius="md" className={classes.card}>
          {/* <Group position="apart"> */}
          <Text className={classes.title}>User Operations</Text>
          {/* <Anchor size="xs" color="dimmed" sx={{ lineHeight: 1 }}>
            User Operations
          </Anchor> */}
          {/* </Group> */}
          <SimpleGrid cols={2} mt="md" mb="xs">
            {items}
          </SimpleGrid>
        </Card>
      </div>
      {/* Hidden components to be called */}
      <>
        <Modal
          opened={openedCreate}
          onClose={closeCreate}
          title="Create"
          size="100%"
          centered
        >
          {/* Modal content */}
        </Modal>
        <Modal
          opened={openedUpdate}
          onClose={closeUpdate}
          title="Update"
          size="80%"
          centered
        >
          {/* Modal content */}
          <SearchField op={"update"} />
        </Modal>
        <Modal
          opened={openedList}
          onClose={closeList}
          title="List of users"
          size="100%"
          centered
        >
          {/* Modal content */}
          <UserListTable data={listData} />
        </Modal>
        <Modal
          opened={openedDelete}
          onClose={closeDelete}
          title="Delete"
          size="60%"
          centered
        >
          {/* Modal content */}
          <SearchField op={"delete"} />
        </Modal>
      </>
    </>
  );
};

export default AdminDashboard;
